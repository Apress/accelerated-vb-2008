Imports System

Public Structure Complex(Of T As Structure)
    Private mReal As T
    Private mImaginary As T

    Public Sub New(ByVal real As T, ByVal imaginary As T)
        Me.mReal = real
        Me.mImaginary = imaginary
    End Sub

    Public Property Real() As T
        Get
            Return mReal
        End Get
        Set(ByVal value As T)
            mReal = value
        End Set
    End Property

    Public Property Img() As T
        Get
            Return mImaginary
        End Get
        Set(ByVal value As T)
            mImaginary = value
        End Set
    End Property
End Structure

Public Class EntryPoint
    Shared Sub Main()
        Dim c As Complex(Of Int64) = New Complex(Of Int64)(4, 5)
    End Sub
End Class

------------------------------------------------------------

Imports System

Public Structure Complex(Of T As Structure)
    Private mReal As T
    Private mImaginary As T

    Public Sub New(ByVal real As T, ByVal imaginary As T)
        Me.mReal = real
        Me.mImaginary = imaginary
    End Sub

    Public Property Real() As T
        Get
            Return mReal
        End Get
        Set(ByVal value As T)
            mReal = value
        End Set
    End Property

    Public Property Img() As T
        Get
            Return mImaginary
        End Get
        Set(ByVal value As T)
            mImaginary = value
        End Set
    End Property

    Public ReadOnly Property Magnitude() As T
        Get
            'This will not compile.
            Return Math.Sqrt(mReal * mReal + mImaginary * mImaginary)
        End Get
    End Property

End Structure

Public Class EntryPoint
    Shared Sub Main()
        Dim c As Complex(Of Int64) = New Complex(Of Int64)(4, 5)

        Console.WriteLine("Magnitude is {0}", c.Magnitude)
    End Sub
End Class

------------------------------------------------------------

Imports System

Public Structure Complex(Of T As {Structure, IConvertible})
    ' Delegate for doing multiplication.
    Public Delegate Function BinaryOp(ByVal val1 As T, ByVal val2 As T) As T

    Private mReal As T
    Private mImaginary As T
    Private mult As BinaryOp
    Private add As BinaryOp
    Private convToT As Converter(Of Double, T)

    Public Sub New(ByVal real As T, ByVal imaginary As T, ByVal mult As BinaryOp, _
        ByVal add As BinaryOp, ByVal convToT As Converter(Of Double, T))

        Me.mReal = real
        Me.mImaginary = imaginary
        Me.mult = mult
        Me.add = add
        Me.convToT = convToT
    End Sub

    Public Property Real() As T
        Get
            Return mReal
        End Get
        Set(ByVal value As T)
            mReal = value
        End Set
    End Property

    Public Property Img() As T
        Get
            Return mImaginary
        End Get
        Set(ByVal value As T)
            mImaginary = value
        End Set
    End Property

    Public ReadOnly Property Magnitude() As T
        Get
            Dim mMagnitude As Double = _
                Math.Sqrt(Convert.ToDouble(add(mult(mReal, mReal), _
                mult(mImaginary, mImaginary))))

            Return convToT(mMagnitude)
        End Get
    End Property
End Structure

Public Class EntryPoint
    Shared Sub Main()
        Dim c As Complex(Of Int64) = New Complex(Of Int64)(4, 5, _
            AddressOf MultiplyInt64, AddressOf AddInt64, AddressOf DoubleToInt64)

        Console.WriteLine("Magnitude is {0}", c.Magnitude)
    End Sub

    Private Shared Function MultiplyInt64(ByVal val1 As Int64, _
        ByVal val2 As Int64) As Int64

        Return val1 * val2
    End Function

    Private Shared Function AddInt64(ByVal val1 As Int64, _
        ByVal val2 As Int64) As Int64

        Return val1 + val2
    End Function

    Private Shared Function DoubleToInt64(ByVal d As Double) As Int64
        Return Convert.ToInt64(d)
    End Function
End Class

------------------------------------------------------------

Imports System

Public Structure Complex(Of T As {Structure, IConvertible, IComparable})
    Implements IComparable(Of Complex(Of T))

    'Delegate for doing multiplication.
    Public Delegate Function BinaryOp(ByVal val1 As T, ByVal val2 As T) As T

    Private mReal As T
    Private mImaginary As T
    Private mult As BinaryOp
    Private add As BinaryOp
    Private convToT As Converter(Of Double, T)

    Public Sub New(ByVal real As T, ByVal imaginary As T, ByVal mult As BinaryOp, _
        ByVal add As BinaryOp, ByVal convToT As Converter(Of Double, T))

        Me.mReal = real
        Me.mImaginary = imaginary
        Me.mult = mult
        Me.add = add
        Me.convToT = convToT
    End Sub

    Public Property Real() As T
        Get
            Return mReal
        End Get
        Set(ByVal value As T)
            mReal = value
        End Set
    End Property

    Public Property Img() As T
        Get
            Return mImaginary
        End Get
        Set(ByVal value As T)
            mImaginary = value
        End Set
    End Property

    Public ReadOnly Property Magnitude() As T
        Get
            Dim mMagnitude As Double = _
                Math.Sqrt(Convert.ToDouble(add(mult(mReal, mReal), _
                mult(mImaginary, mImaginary))))

            Return convToT(mMagnitude)
        End Get
    End Property

    Public Function CompareTo(ByVal other As Complex(Of T)) As Integer _
        Implements IComparable(Of Complex(Of T)).CompareTo

        Return Magnitude.CompareTo(other.Magnitude)
    End Function
End Structure

Public Class EntryPoint
    Shared Sub Main()
        Dim c As Complex(Of Int64) = New Complex(Of Int64)(4, 5, _
            AddressOf MultiplyInt64, AddressOf AddInt64, AddressOf DoubleToInt64)

        Console.WriteLine("Magnitude is {0}", c.Magnitude)
    End Sub

    Private Shared Function MultiplyInt64(ByVal val1 As Int64, _
        ByVal val2 As Int64) As Int64

        Return val1 * val2
    End Function

    Private Shared Function AddInt64(ByVal val1 As Int64, _
        ByVal val2 As Int64) As Int64

        Return val1 + val2
    End Function

    Private Shared Function DoubleToInt64(ByVal d As Double) As Int64
        Return Convert.ToInt64(d)
    End Function
End Class

------------------------------------------------------------

Imports System
Imports System.Collections.Generic

Public Structure Complex(Of T As Structure)
    Implements IComparable(Of Complex(Of T))

    ' Delegate for doing multiplication.
    Public Delegate Function BinaryOp(ByVal val1 As T, ByVal val2 As T) As T

    Private mReal As T
    Private mImaginary As T
    Private mult As BinaryOp
    Private add As BinaryOp
    Private convToT As Converter(Of Double, T)

    Public Sub New(ByVal real As T, ByVal imaginary As T, ByVal mult As BinaryOp, _
        ByVal add As BinaryOp, ByVal convToT As Converter(Of Double, T))

        Me.mReal = real
        Me.mImaginary = imaginary
        Me.mult = mult
        Me.add = add
        Me.convToT = convToT
    End Sub

    Public Property Real() As T
        Get
            Return mReal
        End Get
        Set(ByVal value As T)
            mReal = value
        End Set
    End Property

    Public Property Img() As T
        Get
            Return mImaginary
        End Get
        Set(ByVal value As T)
            mImaginary = value
        End Set
    End Property

    Public ReadOnly Property Magnitude() As T
        Get
            Dim mMagnitude As Double = _
                Math.Sqrt(Convert.ToDouble(add(mult(mReal, mReal), _
                mult(mImaginary, mImaginary))))

            Return convToT(mMagnitude)
        End Get
    End Property

    Public Function CompareTo(ByVal other As Complex(Of T)) As Integer _
        Implements IComparable(Of Complex(Of T)).CompareTo

        Return Comparer(Of T).Default.Compare(Me.Magnitude, other.Magnitude)
    End Function
End Structure

Public Class EntryPoint
    Shared Sub Main()
        Dim c As Complex(Of Int64) = New Complex(Of Int64)(4, 5, _
            AddressOf MultiplyInt64, AddressOf AddInt64, AddressOf DoubleToInt64)

        Console.WriteLine("Magnitude is {0}", c.Magnitude)
    End Sub

    Private Shared Sub DummyMethod(ByVal c As Complex(Of Complex(Of Integer)))
    End Sub

    Private Shared Function MultiplyInt64(ByVal val1 As Int64, _
        ByVal val2 As Int64) As Int64

        Return val1 * val2
    End Function

    Private Shared Function AddInt64(ByVal val1 As Int64, _
        ByVal val2 As Int64) As Int64

        Return val1 + val2
    End Function

    Private Shared Function DoubleToInt64(ByVal d As Double) As Int64
        Return Convert.ToInt64(d)
    End Function
End Class

------------------------------------------------------------

Imports System
Imports System.Collections.Generic

Public Structure Complex(Of T As Structure)
    Implements IComparable(Of Complex(Of T))

    'Delegate for doing multiplication.
    Public Delegate Function BinaryOp(ByVal val1 As T, ByVal val2 As T) As T

    Private mReal As T
    Private mImaginary As T
    Private mult As BinaryOp
    Private add As BinaryOp
    Private convToT As Converter(Of Double, T)
    Private convToDouble As Converter(Of T, Double)

    Public Sub New(ByVal real As T, ByVal imaginary As T, ByVal mult As BinaryOp, _
        ByVal add As BinaryOp, ByVal convToT As Converter(Of Double, T), _
        ByVal convToDouble As Converter(Of T, Double))

        Me.mReal = real
        Me.mImaginary = imaginary
        Me.mult = mult
        Me.add = add
        Me.convToT = convToT
        Me.convToDouble = convToDouble
    End Sub

    Public Property Real() As T
        Get
            Return mReal
        End Get
        Set(ByVal value As T)
            mReal = value
        End Set
    End Property

    Public Property Img() As T
        Get
            Return mImaginary
        End Get
        Set(ByVal value As T)
            mImaginary = value
        End Set
    End Property

    Public ReadOnly Property Magnitude() As T
        Get
            Dim mMagnitude As Double = _
                Math.Sqrt(convToDouble(add(mult(mReal, mReal), _
                mult(mImaginary, mImaginary))))

            Return convToT(mMagnitude)
        End Get
    End Property

    Public Function CompareTo(ByVal other As Complex(Of T)) As Integer _
        Implements IComparable(Of Complex(Of T)).CompareTo

        Return Comparer(Of T).Default.Compare(Me.Magnitude, other.Magnitude)
    End Function
End Structure

Public Class EntryPoint
    Shared Sub Main()
        Dim c As Complex(Of Int64) = New Complex(Of Int64)(4, 5, _
            AddressOf MultiplyInt64, AddressOf AddInt64, AddressOf DoubleToInt64, _
            AddressOf Int64ToDouble)

        Console.WriteLine("Magnitude is {0}", c.Magnitude)
    End Sub

    Private Shared Sub DummyMethod(ByVal c As Complex(Of Complex(Of Integer)))
    End Sub

    Private Shared Function MultiplyInt64(ByVal val1 As Int64, _
        ByVal val2 As Int64) As Int64

        Return val1 * val2
    End Function

    Private Shared Function AddInt64(ByVal val1 As Int64, _
        ByVal val2 As Int64) As Int64

        Return val1 + val2
    End Function

    Private Shared Function DoubleToInt64(ByVal d As Double) As Int64
        Return Convert.ToInt64(d)
    End Function

    Private Shared Function Int64ToDouble(ByVal i As Int64) As Double
        Return Convert.ToDouble(i)
    End Function
End Class

------------------------------------------------------------

